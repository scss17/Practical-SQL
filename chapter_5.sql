-- BUT BECAUSE WE'RE NOT QUERYING A TABLE AND SPECIFYING A COLUMN,
-- THE RESULTS APPEAR BENEATH A ?COLUMN? NAME, SIGNIFYING AN UNKOWN COLUMN
SELECT 2 + 2;
SELECT 9 - 1;
SELECT 3 * 4;

SELECT 11 / 6;
SELECT 11 % 6;
SELECT 11.0 / 6;
SELECT CAST (11 AS numeric(3,1)) / 6;

SELECT 3 ^ 4; -- THE EXPONENTIATION OPERATOR (^) ALLOWS YOU TO RISE A GIVEN BASE NUMBER TO AN EXPONENT
SELECT |/ 10; -- FIND SQUARE ROOT USING THE |/ OPERATOR
SELECT sqrt(10); -- FIND THE SQUARE ROOT USING THE FUNCTION
SELECT ||/ 10; -- FOR A CUBE ROOT, USE THE ||/ OPERATOR
SELECT 4 !; -- TO FIND THE FACTORIAL OF A NUMBER, USE THE !OPERATOR

-- THE FIRST EXPRESSION RETURNS 79 BECAUSE THE MULTIPLICATION OPERATION
-- RECEIVES PRECEDENCE AND IS PROCESSED BEFORE THE ADDITION.
SELECT 7 + 8 * 9;

-- THE SECOND RETURNS 135 BECAUSE THE PARENTHESES FORCE THE 
-- ADDITION OPERATION TO OCCUR FIRST.
SELECT (7 + 8) * 9;

-- EXPONENT OPERATIONS TAKE PRECEDENCE OVER SUBTRACTION, SO WITHOUT
-- PARENTHESES THE ENTIRE EXPRESSION IS EVALUATED LEFT TO RIGHT AND THE
-- OPERATION TO FIND 3 TO THE POWER OF 3 HAPPENS FIRST.
SELECT 3 ^ 3 - 1;

-- THE PARENTHESES FORCE THE SUBTRACTION TO HAPPEN FIRST, SO THE 
-- OPERATION RESULTS IN 9, WHICH IS 3 TO THE POWER OF 2
SELECT 3 ^ (3 - 1);

SELECT geo_name,
       state_us_abbreviation AS "st",
       p0010001 AS "Total Population",
       p0010003 AS "White Alone",
       p0010004 AS "Black or African American Alone",
       p0010005 AS "Am Indian/Alaska Native Alone",
       p0010006 AS "Asian Alone",
       p0010007 AS "Native Hawaiian and Other Pacific Islander Alone",
       p0010008 AS "Some Other Race Alone",
       p0010009 AS "Two or More Races"
FROM us_counties_2010;

-- PROVIDING p0010003 + p0010004 AS ONE OF THE COLUMNS IN THE SELECT
-- STATEMENT HANDLES THE CALCULATION. AGAIN, I USE THE AS KEYWORD TO PROVIDE
-- A READABLE ALIAS FOR THE COLUMN.
SELECT geo_name,
       state_us_abbreviation AS "st",
       p0010003 AS "White Alone",
       p0010004 AS "Black Alone",
       p0010003 + p0010004 AS "Total White and Black"
FROM us_counties_2010;

-- NOW, LET’S BUILD ON THIS TO TEST OUR DATA AND VALIDATE THAT WE IMPORTED
-- COLUMNS CORRECTLY. THE SIX RACE “ALONE” COLUMNS PLUS THE “TWO OR MORE RACES” 
-- COLUMN SHOULD ADD UP TO THE SAME NUMBER AS THE TOTAL POPULATION.
SELECT geo_name,
	   state_us_abbreviation AS "st",
       p0010001 AS "Total",
       p0010003 + p0010004 + p0010005 + p0010006 + p0010007 + p0010008 + p0010009 AS "All Races",
       (p0010003 + p0010004 + p0010005 + p0010006 + p0010007 + p0010008 + p0010009) - p0010001 AS "Difference"
FROM us_counties_2010
ORDER BY "Difference" DESC;

-- THE KEY PIECE OF THIS QUERY DIVIDES P0010006, THE COLUMN WITH THE COUNT
-- OF ASIAN ALONE, BY P0010001, THE COLUMN FOR TOTAL POPULATION
SELECT geo_name,
       state_us_abbreviation AS "st",
       (CAST(p0010006 AS numeric(8,1)) / p0010001) * 100 AS "pct_asian"
FROM us_counties_2010
ORDER BY "pct_asian" DESC;

-- CREATES A SMALL TABLE CALLED PERCENT_CHANGE
CREATE TABLE percent_change (
    department varchar(20),
    spend_2014 numeric(10,2),
    spend_2017 numeric(10,2)
);

-- INSERTS SIX ROWS WITH DATA ON DEPARTMENT SPENDING FOR 
-- THE YEARS 2014 AND 2017.
INSERT INTO percent_change
VALUES
('Building', 250000, 289000),
('Assessor', 178556, 179500),
('Library', 87777, 90001),
('Clerk', 451980, 650000),
('Police', 250000, 223000),
('Recreation', 199000, 195000);

-- THE PERCENT CHANGE FORMULA SUBTRACTS SPEND_2014 FROM SPEND_2017 AND
-- THEN DIVIDES BY SPEND_2014. WE MULTIPLY BY 100 TO EXPRESS THE RESULT AS A
-- PORTION OF 100.
SELECT department,
       spend_2014,
       spend_2017,
       round((spend_2017 - spend_2014) / spend_2014 * 100, 1) AS "pct_change"
FROM percent_change;

-- USING AVG() AND SUM() ON COLUMN P0010001 (THE TOTAL
-- POPULATION) MAKES IT EASY
SELECT sum(p0010001) AS "County Sum",
       round(avg(p0010001), 0) AS "County Average"
FROM us_counties_2010;

-- USING PERCENTILE FUNCTION
CREATE TABLE percentile_test (
numbers INTEGER
);

INSERT INTO percentile_test (numbers) 
VALUES
(1), (2), (3), (4), (5), (6);

SELECT 
	percentile_cont(.5)
	WITHIN GROUP (ORDER BY numbers),
	percentile_disc(.5)
	WITHIN GROUP (ORDER BY numbers)
FROM percentile_test;

SELECT sum(p0010001) AS "County Sum",
			 round(avg(p0010001), 0) AS "County Average",
			 percentile_cont(.5)
	     WITHIN GROUP (ORDER BY p0010001) AS "County Median"
FROM us_counties_2010;

-- TO FIND ANY INDIVIDUAL VALUE, YOU CAN JUST PLUG IT INTO A PERCENTILE FUNCTION.
percentile_cont(.25)

SELECT mode() WITHIN GROUP (ORDER BY p0010001)
FROM us_counties_2010;